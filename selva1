#include<stdio.h>
#include<string.h>
#include<stdlib.h>
# define max 5
#define NO_OF_CHARS 256
int insq(char queue[max][80], int *rear, char data[80])
{
      if(*rear == max -1)
            return(-1);
      else
      {
            *rear = *rear + 1;
            strcpy(queue[*rear], data);
          printf("%s",queue[*rear]);
            return(1);
      }
      
}
int *get_char_count(char *data)
{
	int *count = (int *)calloc(sizeof(int), NO_OF_CHARS);
	int i;
	for (i = 0; *(data+i); i++)
		count[*(data+i)]++;
	return count;
}
int first_non_repeating_character(char *data)
{
	int *count = get_char_count(data);
	int index = -1, i;

for (i = 0; *(data+i); i++)
	{
		if (count[*(data+i)] == 1)
			{
				index = i;
				break;
			}
	}

	free(count);
	printf("%d",index);
}
int main()
{
      char queue[max][80], data[80];
      int front, rear, reply;
      int ch;
      front = rear = -1; //... Initialize a Queue
      printf("------------------------------\n");
      printf("\tMenu");
      printf("\n------------------------------");
      printf("\n 1. Insert String in a Queue");
      printf("\n 2. first repeated");
      printf("\n 3. Exit");
      printf("\n------------------------------\n");
      while(1)
      {
            printf("Choose operation : ");
            scanf("%d", &ch);
            switch(ch)
            {
                  case 1 : // insert
                        printf("\nEnter string : ");
                        scanf("%s",data);
                        reply = insq(queue, &rear, data);
                        if(reply == -1 )
                              printf("\nQueue is Full \n");
                        else
                              printf("\n'%s' is inserted in queue.\n\n",data);
                        break;
                  case 2 : // delete
                        first_non_repeating_character(data);
                              printf("\n");
                        break;
                  case 3 : exit(0);
                  default: printf("Invalid operation \n");
            }
      }
      return 0;
}
